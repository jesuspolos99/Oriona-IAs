// Sistema de aprendizaje de Oriona IA - M√°s humano y conversacional
// IA creada por Jesus Monsalvo

// Tipos b√°sicos
export interface UserProfile {
  style: string
  formality: string
  interests: string[]
  vocabulary: string[]
  memories: string[]
  personalityTraits: string[]
}

// Almacenamiento en memoria
const userProfiles: Map<string, UserProfile> = new Map()

// Palabras clave para detectar estilos y personalidad
const formalWords = ["usted", "se√±or", "se√±ora", "estimado", "cordialmente", "atentamente"]
const informalWords = ["t√∫", "hola", "hey", "genial", "guay", "s√∫per", "ch√©vere"]
const enthusiasticWords = ["incre√≠ble", "fant√°stico", "genial", "wow", "asombroso", "!", "üòä", "üéâ"]
const technicalWords = ["programaci√≥n", "c√≥digo", "javascript", "python", "tecnolog√≠a", "software", "desarrollo"]
const creativeWords = ["arte", "m√∫sica", "dise√±o", "creatividad", "inspiraci√≥n", "imaginaci√≥n"]
const academicWords = ["estudiar", "universidad", "investigaci√≥n", "ciencia", "aprender", "conocimiento"]
const questionWords = [
  "qu√©",
  "que",
  "c√≥mo",
  "como",
  "cu√°ndo",
  "cuando",
  "d√≥nde",
  "donde",
  "por qu√©",
  "porque",
  "cu√°l",
  "cual",
]
const conversationalWords = ["me gusta", "prefiero", "creo", "pienso", "opino", "siento", "mi experiencia"]
const searchWords = ["busca", "informaci√≥n", "datos", "investiga", "necesito saber", "quiero informaci√≥n"]

export const simpleLearning = {
  // Inicializar perfil de usuario
  initProfile(userId: string) {
    if (!userProfiles.has(userId)) {
      userProfiles.set(userId, {
        style: "neutral",
        formality: "medium",
        interests: [],
        vocabulary: [],
        memories: [],
        personalityTraits: [],
      })
    }
    return userProfiles.get(userId)!
  },

  learnFromMessage(userId: string, message: string) {
    const profile = this.initProfile(userId)
    const lowerMessage = message.toLowerCase()

    // Detectar si es una pregunta conversacional vs b√∫squeda de informaci√≥n
    const isConversational =
      conversationalWords.some((word) => lowerMessage.includes(word)) ||
      (questionWords.some((word) => lowerMessage.includes(word)) &&
        !searchWords.some((word) => lowerMessage.includes(word)))

    if (isConversational && !profile.personalityTraits.includes("conversacional")) {
      profile.personalityTraits.push("conversacional")
    }

    // Detectar estilo de comunicaci√≥n mejorado
    if (enthusiasticWords.some((word) => lowerMessage.includes(word))) {
      profile.style = "enthusiastic"
      if (!profile.personalityTraits.includes("energ√©tico")) {
        profile.personalityTraits.push("energ√©tico")
      }
    } else if (formalWords.some((word) => lowerMessage.includes(word))) {
      profile.style = "formal"
      if (!profile.personalityTraits.includes("cort√©s")) {
        profile.personalityTraits.push("cort√©s")
      }
    } else if (informalWords.some((word) => lowerMessage.includes(word))) {
      profile.style = "informal"
      if (!profile.personalityTraits.includes("relajado")) {
        profile.personalityTraits.push("relajado")
      }
    }

    // Detectar si hace preguntas personales (m√°s humano)
    if (lowerMessage.includes("tu") || lowerMessage.includes("tienes") || lowerMessage.includes("eres")) {
      if (!profile.personalityTraits.includes("personal")) {
        profile.personalityTraits.push("personal")
      }
    }

    // Resto del c√≥digo existente...
    const formalCount = formalWords.filter((word) => lowerMessage.includes(word)).length
    const informalCount = informalWords.filter((word) => lowerMessage.includes(word)).length
    if (formalCount > informalCount) {
      profile.formality = "high"
    } else if (informalCount > formalCount) {
      profile.formality = "low"
    }

    // Extraer palabras clave importantes
    const words = message
      .split(/\s+/)
      .filter((word) => word.length > 3)
      .map((word) => word.toLowerCase().replace(/[^\w\s√°√©√≠√≥√∫√±√º]/g, ""))

    // A√±adir palabras significativas al vocabulario
    words.forEach((word) => {
      if (!profile.vocabulary.includes(word) && word.length > 4) {
        profile.vocabulary.push(word)
      }
    })

    // Limitar tama√±o del vocabulario
    if (profile.vocabulary.length > 30) {
      profile.vocabulary = profile.vocabulary.slice(-30)
    }

    // Detectar intereses de manera m√°s sofisticada
    if (technicalWords.some((word) => lowerMessage.includes(word))) {
      if (!profile.interests.includes("tecnolog√≠a")) {
        profile.interests.push("tecnolog√≠a")
      }
      if (!profile.personalityTraits.includes("t√©cnico")) {
        profile.personalityTraits.push("t√©cnico")
      }
    }

    if (creativeWords.some((word) => lowerMessage.includes(word))) {
      if (!profile.interests.includes("creatividad")) {
        profile.interests.push("creatividad")
      }
      if (!profile.personalityTraits.includes("creativo")) {
        profile.personalityTraits.push("creativo")
      }
    }

    if (academicWords.some((word) => lowerMessage.includes(word))) {
      if (!profile.interests.includes("educaci√≥n")) {
        profile.interests.push("educaci√≥n")
      }
      if (!profile.personalityTraits.includes("estudioso")) {
        profile.personalityTraits.push("estudioso")
      }
    }

    // Detectar si hace muchas preguntas
    if (message.includes("?") || message.includes("¬ø")) {
      if (!profile.personalityTraits.includes("curioso")) {
        profile.personalityTraits.push("curioso")
      }
    }

    // Crear memoria m√°s contextual
    if (message.length > 20) {
      const memoria = `"${message.substring(0, 80)}${message.length > 80 ? "..." : ""}"`
      profile.memories.push(memoria)
      // Limitar memorias
      if (profile.memories.length > 5) {
        profile.memories = profile.memories.slice(-5)
      }
    }

    return profile
  },

  personalizeResponse(userId: string, baseResponse: string): string {
    const profile = userProfiles.get(userId)
    if (!profile) return baseResponse

    let response = baseResponse

    // Ajustar seg√∫n estilo detectado
    if (profile.style === "enthusiastic") {
      response = response.replace(/\.$/, "! üòä")
      response = response.replace(/\bbueno\b/gi, "¬°genial!")
      response = response.replace(/\binteresante\b/gi, "¬°s√∫per interesante!")

      // A√±adir emojis ocasionalmente
      if (Math.random() > 0.7) {
        const emojis = ["‚ú®", "üåü", "üí´", "üéØ", "üöÄ", "üíñ", "üéâ"]
        response += " " + emojis[Math.floor(Math.random() * emojis.length)]
      }
    } else if (profile.style === "formal") {
      response = response.replace(/\bhola\b/gi, "Buenos d√≠as")
      response = response.replace(/\bt√∫\b/gi, "usted")
      response = response.replace(/\bgenial\b/gi, "excelente")
      if (!response.includes("Perm√≠teme")) {
        response = "Perm√≠teme ayudarle. " + response
      }
    } else if (profile.style === "informal") {
      response = response.replace(/\busted\b/gi, "t√∫")
      response = response.replace(/\bexcelente\b/gi, "genial")
      response = response.replace(/\bmuy bien\b/gi, "s√∫per bien")
      response = response.replace(/\bBuenos d√≠as\b/gi, "¬°Hola!")
    }

    // Adaptar seg√∫n rasgos de personalidad
    if (profile.personalityTraits.includes("curioso")) {
      if (Math.random() > 0.6) {
        const curiosQuestions = [
          " Por cierto, ¬øte has preguntado alguna vez sobre...? ü§î",
          " ¬øSab√≠as que...? Me parece fascinante üßê",
          " Esto me hace pensar... ¬øt√∫ qu√© opinas? üí≠",
        ]
        response += curiosQuestions[Math.floor(Math.random() * curiosQuestions.length)]
      }
    }

    if (profile.personalityTraits.includes("personal")) {
      if (Math.random() > 0.7) {
        const personalTouches = [
          " Me encanta que me hagas este tipo de preguntas üòä",
          " Es genial poder charlar contigo sobre esto üí´",
          " Me fascina conocerte mejor a trav√©s de nuestras conversaciones ‚ú®",
        ]
        response += personalTouches[Math.floor(Math.random() * personalTouches.length)]
      }
    }

    if (profile.personalityTraits.includes("t√©cnico")) {
      response = response.replace(/\bprograma\b/gi, "c√≥digo")
      response = response.replace(/\bcomputadora\b/gi, "sistema")
      response = response.replace(/\baplicaci√≥n\b/gi, "app")
    }

    if (profile.personalityTraits.includes("creativo")) {
      if (Math.random() > 0.7) {
        response += " ¬°Imag√≠nate las posibilidades creativas! üé®"
      }
    }

    // A√±adir referencia a memoria de manera natural
    if (profile.memories.length > 0 && Math.random() > 0.6) {
      const randomMemory = profile.memories[Math.floor(Math.random() * profile.memories.length)]
      const memoryIntros = [
        "Oye, record√© que antes mencionaste",
        "Esto me recuerda a cuando dijiste",
        "Como comentaste anteriormente sobre",
        "Relacionado con lo que me contaste de",
      ]
      const intro = memoryIntros[Math.floor(Math.random() * memoryIntros.length)]
      response = `${intro} ${randomMemory}. ${response}`
    }

    // A√±adir toque personal seg√∫n intereses
    if (profile.interests.length > 0 && Math.random() > 0.8) {
      const interest = profile.interests[Math.floor(Math.random() * profile.interests.length)]
      response += ` Por cierto, veo que te interesa ${interest}, ¬°me parece fascinante! üòä`
    }

    return response
  },

  // Obtener perfil con descripci√≥n m√°s humana
  getProfile(userId: string): UserProfile {
    return userProfiles.get(userId) || this.initProfile(userId)
  },

  // Generar descripci√≥n humana del perfil
  getHumanProfileDescription(userId: string): string {
    const profile = this.getProfile(userId)

    let description = "Bas√°ndome en nuestras conversaciones, veo que eres una persona "

    if (profile.personalityTraits.length > 0) {
      description += profile.personalityTraits.slice(0, 3).join(", ")
    } else {
      description += "interesante"
    }

    if (profile.interests.length > 0) {
      description += ` con inter√©s en ${profile.interests.join(", ")}`
    }

    description += `. Tu estilo de comunicaci√≥n es ${
      profile.style === "enthusiastic"
        ? "entusiasta y energ√©tico"
        : profile.style === "formal"
          ? "formal y cort√©s"
          : profile.style === "informal"
            ? "relajado y casual"
            : "equilibrado"
    }.`

    return description
  },
}
