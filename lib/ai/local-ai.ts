// Oriona IA - Sistema de IA con personalidad humana y conversacional
// IA creada por Jesus Monsalvo

import { humanConversation } from "./human-conversation"
import { expandedConversation } from "./expanded-conversation"

interface RespuestaIA {
  patron: RegExp[]
  respuestas: string[]
  contexto?: string
}

interface SearchResult {
  title: string
  snippet: string
  url: string
}

type ModoRespuesta = "investigacion" | "conversacion" | "auto"

class OrianaAI {
  private ultimoContexto: string | null = null
  private contadorConversacion = 0
  private ultimosResultadosBusqueda: SearchResult[] = []

  // M√©todo principal con detecci√≥n autom√°tica
  async generateResponse(prompt: string, conversationHistory: string[] = []): Promise<string> {
    return this.generateResponseWithMode(prompt, conversationHistory, "auto")
  }

  // M√©todo con modo espec√≠fico
  async generateResponseWithMode(
    prompt: string,
    conversationHistory: string[] = [],
    mode: ModoRespuesta = "auto",
    userId = "default",
  ): Promise<string> {
    this.contadorConversacion++

    // Simular tiempo de procesamiento
    await new Promise((resolve) => setTimeout(resolve, 200 + Math.random() * 300))

    const promptLower = prompt.toLowerCase().trim()

    console.log(`üéØ Generando respuesta en modo: ${mode}`)

    // MODO INVESTIGACI√ìN: Siempre buscar
    if (mode === "investigacion") {
      console.log("üîç Modo investigaci√≥n: Forzando b√∫squeda web")
      return await this.handleWebSearch(prompt, "¬°Perfecto! Voy a investigar eso para ti üîç")
    }

    // MODO CONVERSACI√ìN: Nunca buscar, solo conversar con personalidad humana
    if (mode === "conversacion") {
      console.log("üí¨ Modo conversaci√≥n: Activando conversaci√≥n humana avanzada")

      // PRIMERO: Intentar respuestas expandidas para conversaci√≥n b√°sica
      const expandedResponse = expandedConversation.generateExpandedResponse(prompt, userId)
      if (expandedResponse) {
        console.log("‚ú® Usando respuesta expandida de conversaci√≥n")
        return expandedResponse
      }

      // SEGUNDO: Usar el sistema de conversaci√≥n humana avanzado
      console.log("üíú Usando sistema de conversaci√≥n humana avanzado")
      return await humanConversation.generateHumanResponse(prompt, userId, conversationHistory)
    }

    // MODO AUTO: Comportamiento original con detecci√≥n inteligente
    console.log("ü§ñ Modo auto: Detecci√≥n inteligente")

    // PRIMERO: Verificar si necesita b√∫squeda web (prioridad m√°xima)
    if (this.shouldSearchWeb(prompt)) {
      console.log("üîç Oriona detect√≥ necesidad de b√∫squeda para:", prompt)
      return await this.handleWebSearch(prompt)
    }

    // SEGUNDO: Intentar respuestas expandidas para conversaci√≥n b√°sica
    const expandedResponse = expandedConversation.generateExpandedResponse(prompt, userId)
    if (expandedResponse) {
      console.log("‚ú® Usando respuesta expandida")
      return expandedResponse
    }

    // TERCERO: Para todo lo dem√°s, usar conversaci√≥n humana
    console.log("üíú Usando conversaci√≥n humana para respuesta compleja")
    return await humanConversation.generateHumanResponse(prompt, userId, conversationHistory)
  }

  private shouldSearchWeb(query: string): boolean {
    const queryLower = query.toLowerCase().trim()

    // Patrones EXPL√çCITOS de b√∫squeda (alta prioridad)
    const explicitSearchPatterns = [
      /busca/i,
      /buscar/i,
      /informaci√≥n sobre/i,
      /informacion sobre/i,
      /datos sobre/i,
      /datos de/i,
      /investiga/i,
      /investigar/i,
      /necesito informaci√≥n/i,
      /necesito informacion/i,
      /quiero informaci√≥n/i,
      /quiero informacion/i,
      /dime sobre/i,
      /cu√©ntame sobre/i,
      /cuentame sobre/i,
      /expl√≠came sobre/i,
      /explicame sobre/i,
      /qu√© sabes de/i,
      /que sabes de/i,
      /qu√© sabes sobre/i,
      /que sabes sobre/i,
    ]

    // Si contiene patrones expl√≠citos, SIEMPRE buscar
    if (explicitSearchPatterns.some((pattern) => pattern.test(queryLower))) {
      return true
    }

    // Patrones de informaci√≥n factual espec√≠fica
    const factualPatterns = [
      // Preguntas sobre personas espec√≠ficas
      /qui√©n es [a-z√°√©√≠√≥√∫√±√º\s]+/i,
      /quien es [a-z√°√©√≠√≥√∫√±√º\s]+/i,
      /qui√©n fue [a-z√°√©√≠√≥√∫√±√º\s]+/i,
      /quien fue [a-z√°√©√≠√≥√∫√±√º\s]+/i,

      // Fechas y eventos hist√≥ricos
      /en qu√© a√±o/i,
      /en que ano/i,
      /cu√°ndo naci√≥/i,
      /cuando nacio/i,
      /cu√°ndo muri√≥/i,
      /cuando murio/i,
      /cu√°ndo ocurri√≥/i,
      /cuando ocurrio/i,
      /cu√°ndo fue/i,
      /cuando fue/i,
      /qu√© pas√≥ en/i,
      /que paso en/i,

      // Lugares y geograf√≠a
      /d√≥nde est√°/i,
      /donde esta/i,
      /d√≥nde se encuentra/i,
      /donde se encuentra/i,
      /capital de/i,
      /poblaci√≥n de/i,
      /poblacion de/i,
      /ubicaci√≥n de/i,
      /ubicacion de/i,

      // Definiciones y conceptos
      /qu√© es [a-z√°√©√≠√≥√∫√±√º\s]+/i,
      /que es [a-z√°√©√≠√≥√∫√±√º\s]+/i,
      /definici√≥n de/i,
      /definicion de/i,
      /significado de/i,
      /concepto de/i,

      // Datos espec√≠ficos
      /cu√°nto cuesta/i,
      /cuanto cuesta/i,
      /precio de/i,
      /precio del/i,
      /precio actual/i,
      /cotizaci√≥n/i,
      /cotizacion/i,
      /estad√≠sticas/i,
      /estadisticas/i,
      /datos exactos/i,
      /cifras de/i,
      /n√∫meros de/i,
      /numeros de/i,

      // Noticias y actualidad
      /√∫ltimas noticias/i,
      /ultimas noticias/i,
      /noticias recientes/i,
      /qu√© est√° pasando/i,
      /que esta pasando/i,
      /actualidad de/i,
      /situaci√≥n actual/i,
      /situacion actual/i,

      // C√≥mo hacer algo espec√≠fico
      /c√≥mo se hace/i,
      /como se hace/i,
      /c√≥mo funciona/i,
      /como funciona/i,
      /pasos para/i,
      /instrucciones para/i,
      /tutorial de/i,
      /gu√≠a para/i,
      /guia para/i,

      // Comparaciones espec√≠ficas
      /diferencia entre/i,
      /diferencias entre/i,
      /comparaci√≥n entre/i,
      /comparacion entre/i,
      /versus/i,
      /vs\./i,

      // Listas y rankings
      /mejores [a-z√°√©√≠√≥√∫√±√º\s]+ de/i,
      /top [0-9]+ de/i,
      /lista de/i,
      /ranking de/i,
      /cu√°les son/i,
      /cuales son/i,
    ]

    // Verificar patrones factuales
    if (factualPatterns.some((pattern) => pattern.test(queryLower))) {
      return true
    }

    // Palabras que indican necesidad de informaci√≥n actualizada
    const currentInfoKeywords = [
      "actual",
      "actualidad",
      "reciente",
      "√∫ltimo",
      "ultima",
      "nuevo",
      "nueva",
      "hoy",
      "ahora",
      "presente",
      "2024",
      "2025",
      "este a√±o",
      "este ano",
    ]

    // Si menciona informaci√≥n actual + un tema espec√≠fico
    if (currentInfoKeywords.some((keyword) => queryLower.includes(keyword)) && queryLower.length > 15) {
      return true
    }

    // Nombres propios (personas, lugares, empresas, productos)
    const properNounPattern = /\b[A-Z√Å√â√ç√ì√ö√ë√ú][a-z√°√©√≠√≥√∫√±√º]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë√ú][a-z√°√©√≠√≥√∫√±√º]+)*\b/
    if (properNounPattern.test(query) && queryLower.length > 10) {
      // Excluir nombres comunes que no requieren b√∫squeda
      const commonNames = ["Oriona", "Jesus", "Monsalvo", "IA", "AI"]
      if (!commonNames.some((name) => queryLower.includes(name.toLowerCase()))) {
        return true
      }
    }

    // Palabras que indican conversaci√≥n personal (NO buscar)
    const personalConversationWords = [
      "me gusta",
      "prefiero",
      "creo que",
      "pienso que",
      "mi opini√≥n",
      "mi opinion",
      "qu√© opinas",
      "que opinas",
      "c√≥mo te sientes",
      "como te sientes",
      "tu experiencia",
      "tu perspectiva",
      "cu√©ntame de ti",
      "cuentame de ti",
      "h√°blame de ti",
      "hablame de ti",
      "eres",
      "tienes",
      "puedes sentir",
      "tu color favorito",
      "tu comida favorita",
      "te gusta",
      "prefieres",
      "me siento",
      "estoy triste",
      "estoy feliz",
      "tengo miedo",
      "me preocupa",
      "necesito hablar",
      "quiero conversar",
      "hola",
      "como estas",
      "que haces",
      "que tal",
      "gracias",
      "de nada",
    ]

    // Si es claramente conversacional, NO buscar
    if (personalConversationWords.some((word) => queryLower.includes(word))) {
      return false
    }

    // Si la consulta es muy corta (menos de 8 caracteres), probablemente no necesita b√∫squeda
    if (queryLower.length < 8) {
      return false
    }

    // Por defecto, si no est√° claro, buscar (mejor pecar de m√°s informaci√≥n)
    return queryLower.length > 15
  }

  private async handleWebSearch(prompt: string, introMessage?: string): Promise<string> {
    try {
      console.log("üåê Oriona iniciando b√∫squeda web para:", prompt)

      const response = await fetch("/api/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ query: prompt }),
      })

      if (response.ok) {
        const data = await response.json()
        this.ultimosResultadosBusqueda = data.results || []

        if (this.ultimosResultadosBusqueda.length > 0) {
          // Simular tiempo de b√∫squeda m√°s realista
          await new Promise((resolve) => setTimeout(resolve, 800 + Math.random() * 1200))
          return this.generateWebBasedResponse(prompt, this.ultimosResultadosBusqueda, introMessage)
        }
      }
    } catch (error) {
      console.error("‚ùå Error en b√∫squeda web:", error)
    }

    // Si falla la b√∫squeda, responder que no se pudo obtener informaci√≥n
    return this.generateSearchFailureResponse(prompt)
  }

  private generateSearchFailureResponse(prompt: string): string {
    const failureResponses = [
      `¬°Ay! üòÖ Intent√© buscar informaci√≥n sobre "${prompt}" pero no pude acceder a internet en este momento. ¬øPodr√≠as intentar reformular tu pregunta o preguntarme algo m√°s general?`,
      `¬°Ups! ü§î No logr√© encontrar informaci√≥n actualizada sobre "${prompt}" ahora mismo. ¬øHay algo m√°s espec√≠fico que te gustar√≠a saber o alguna otra forma en que pueda ayudarte?`,
      `¬°Vaya! üòä Parece que mi b√∫squeda sobre "${prompt}" no funcion√≥ como esperaba. ¬øTe gustar√≠a que conversemos sobre el tema de otra manera?`,
    ]

    return failureResponses[Math.floor(Math.random() * failureResponses.length)]
  }

  private generateWebBasedResponse(prompt: string, results: SearchResult[], introMessage?: string): string {
    const introducciones = [
      "¬°Perfecto! Encontr√© informaci√≥n muy interesante sobre eso üîç",
      "¬°Excelente pregunta! Acabo de buscar en internet y esto es lo que descubr√≠ üåê",
      "¬°Me encanta investigar! Aqu√≠ tienes lo que encontr√© navegando por la web ‚ú®",
      "¬°Genial! He estado buscando informaci√≥n fresca y esto es lo m√°s relevante üí°",
      "¬°S√∫per! D√©jame compartirte lo que acabo de encontrar en internet üöÄ",
    ]

    const introduccion = introMessage || introducciones[Math.floor(Math.random() * introducciones.length)]

    let respuesta = `${introduccion}\n\n`

    // A√±adir informaci√≥n de los resultados
    results.forEach((result, index) => {
      if (index === 0) {
        respuesta += `**${result.title}**\n${result.snippet}\n\n`
      } else if (index < 3) {
        respuesta += `**Tambi√©n encontr√©:**\n${result.snippet}\n\n`
      }
    })

    // A√±adir fuentes
    if (results.length > 0) {
      respuesta += "üìñ **Fuentes consultadas:**\n"
      results.slice(0, 3).forEach((result) => {
        respuesta += `‚Ä¢ ${result.title}\n`
      })

      respuesta += "\n¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico o tienes alguna otra pregunta? üòä"
    }

    return respuesta.replace(/\n{3,}/g, "\n\n").trim()
  }

  getLastSearchResults(): SearchResult[] {
    return this.ultimosResultadosBusqueda
  }

  isReady(): boolean {
    return true
  }

  // Generar pregunta para romper el hielo
  generateIceBreaker(): string {
    return expandedConversation.generateIceBreaker()
  }

  // Obtener estad√≠sticas de engagement
  getEngagementStats(userId: string) {
    return expandedConversation.getEngagementStats(userId)
  }
}

// Instancia singleton de Oriona IA
export const localAI = new OrianaAI()
