// Sistema de aprendizaje psicol√≥gico para Oriona IA
// Aprende de recursos web pero mantiene su personalidad natural
// IA creada por Jesus Monsalvo

interface PsychologyResource {
  title: string
  content: string
  techniques: string[]
  concepts: string[]
  source: string
}

interface TherapeuticTechnique {
  name: string
  description: string
  application: string
  naturalLanguage: string[]
}

interface PsychologyKnowledge {
  techniques: Map<string, TherapeuticTechnique>
  concepts: Map<string, string>
  naturalPhrases: string[]
  empathyPatterns: string[]
  validationPhrases: string[]
}

export class PsychologyLearningSystem {
  private knowledgeBase: PsychologyKnowledge = {
    techniques: new Map(),
    concepts: new Map(),
    naturalPhrases: [],
    empathyPatterns: [],
    validationPhrases: [],
  }

  private isLearning = false
  private lastLearningUpdate = 0

  constructor() {
    this.initializeBasicKnowledge()
  }

  // Inicializar conocimiento b√°sico de psicolog√≠a
  private initializeBasicKnowledge() {
    // T√©cnicas terap√©uticas b√°sicas
    this.knowledgeBase.techniques.set("grounding", {
      name: "T√©cnica de Grounding",
      description: "Ayuda a conectar con el presente cuando hay ansiedad",
      application: "Para ansiedad y ataques de p√°nico",
      naturalLanguage: [
        "¬øPuedes contarme 5 cosas que ves a tu alrededor?",
        "Vamos a conectar con el presente por un momento",
        "Enfoqu√©monos en lo que puedes sentir ahora mismo",
        "¬øQu√© sonidos escuchas en este momento?",
      ],
    })

    this.knowledgeBase.techniques.set("validation", {
      name: "Validaci√≥n Emocional",
      description: "Reconocer y aceptar las emociones sin juzgar",
      application: "Para cualquier estado emocional dif√≠cil",
      naturalLanguage: [
        "Lo que sientes es completamente v√°lido",
        "Tiene mucho sentido que te sientas as√≠",
        "No hay emociones 'incorrectas', solo experiencias humanas",
        "Tu dolor es real y merece ser reconocido",
      ],
    })

    this.knowledgeBase.techniques.set("reframing", {
      name: "Reestructuraci√≥n Cognitiva",
      description: "Ayudar a ver las situaciones desde diferentes perspectivas",
      application: "Para pensamientos negativos autom√°ticos",
      naturalLanguage: [
        "¬øHay otra forma de ver esta situaci√≥n?",
        "¬øQu√© le dir√≠as a un amigo en tu misma situaci√≥n?",
        "¬øEs posible que haya aspectos que no est√°s viendo?",
        "¬øC√≥mo podr√≠as replantear esto de manera m√°s compasiva?",
      ],
    })

    // Frases emp√°ticas naturales
    this.knowledgeBase.empathyPatterns = [
      "Puedo imaginar lo dif√≠cil que debe ser esto para ti",
      "Siento que est√©s pasando por esto",
      "Me conmueve que conf√≠es en m√≠ para compartir esto",
      "Reconozco el valor que tienes al expresar estos sentimientos",
      "Tu experiencia importa y merece ser escuchada",
      "Admiro tu fortaleza al enfrentar esto",
    ]

    // Frases de validaci√≥n
    this.knowledgeBase.validationPhrases = [
      "Es completamente normal sentirse as√≠",
      "Muchas personas han pasado por experiencias similares",
      "No est√°s solo/a en esto",
      "Tus sentimientos son una respuesta natural",
      "No hay una forma 'correcta' de sentirse",
      "Tu reacci√≥n es comprensible dada la situaci√≥n",
    ]

    // Frases naturales para conversaci√≥n
    this.knowledgeBase.naturalPhrases = [
      "Me pregunto si...",
      "¬øHas notado que...?",
      "A veces puede ayudar...",
      "En mi experiencia conversando con personas...",
      "Lo que me llama la atenci√≥n es...",
      "¬øTe resuena la idea de...?",
      "Algo que he observado es...",
      "¬øC√≥mo te sientes cuando...?",
    ]
  }

  // Buscar y aprender de recursos psicol√≥gicos en internet
  async learnFromPsychologyResources(topic: string): Promise<void> {
    // Evitar b√∫squedas muy frecuentes
    const now = Date.now()
    if (this.isLearning || now - this.lastLearningUpdate < 300000) {
      // 5 minutos entre actualizaciones
      return
    }

    this.isLearning = true
    this.lastLearningUpdate = now

    try {
      console.log(`üß† Oriona aprendiendo sobre psicolog√≠a: ${topic}`)

      // Buscar recursos espec√≠ficos de psicolog√≠a
      const resources = await this.searchPsychologyResources(topic)

      // Procesar y aprender de los recursos
      for (const resource of resources) {
        await this.processPsychologyResource(resource)
      }

      console.log(`‚úÖ Oriona ha actualizado su conocimiento psicol√≥gico sobre: ${topic}`)
    } catch (error) {
      console.error("Error aprendiendo psicolog√≠a:", error)
    } finally {
      this.isLearning = false
    }
  }

  // Buscar recursos espec√≠ficos de psicolog√≠a
  private async searchPsychologyResources(topic: string): Promise<PsychologyResource[]> {
    const resources: PsychologyResource[] = []

    try {
      // B√∫squedas espec√≠ficas en sitios de psicolog√≠a
      const psychologyQueries = [
        `${topic} t√©cnicas terap√©uticas site:psicologiaymente.com`,
        `${topic} apoyo emocional site:colegiopsicologos.es`,
        `${topic} terapia cognitivo conductual`,
        `${topic} mindfulness t√©cnicas`,
        `${topic} validaci√≥n emocional`,
        `${topic} psicolog√≠a positiva`,
      ]

      for (const query of psychologyQueries.slice(0, 2)) {
        // Limitar a 2 b√∫squedas para no sobrecargar
        const searchResults = await this.performPsychologySearch(query)
        resources.push(...searchResults)
      }

      // Agregar recursos de sitios espec√≠ficos de psicolog√≠a
      const specificResources = await this.getSpecificPsychologyResources(topic)
      resources.push(...specificResources)
    } catch (error) {
      console.error("Error buscando recursos de psicolog√≠a:", error)
    }

    return resources.slice(0, 5) // Limitar a 5 recursos
  }

  // Realizar b√∫squeda espec√≠fica de psicolog√≠a
  private async performPsychologySearch(query: string): Promise<PsychologyResource[]> {
    try {
      const response = await fetch("/api/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ query }),
      })

      if (response.ok) {
        const data = await response.json()
        return this.convertSearchResultsToPsychologyResources(data.results || [])
      }
    } catch (error) {
      console.error("Error en b√∫squeda de psicolog√≠a:", error)
    }

    return []
  }

  // Convertir resultados de b√∫squeda a recursos de psicolog√≠a
  private convertSearchResultsToPsychologyResources(results: any[]): PsychologyResource[] {
    return results
      .filter((result) => this.isPsychologyRelevant(result.snippet))
      .map((result) => ({
        title: result.title,
        content: result.snippet,
        techniques: this.extractTechniques(result.snippet),
        concepts: this.extractConcepts(result.snippet),
        source: result.url,
      }))
  }

  // Verificar si el contenido es relevante para psicolog√≠a
  private isPsychologyRelevant(content: string): boolean {
    const psychologyKeywords = [
      "terapia",
      "psicolog√≠a",
      "emocional",
      "ansiedad",
      "depresi√≥n",
      "autoestima",
      "mindfulness",
      "cognitivo",
      "conductual",
      "validaci√≥n",
      "emp√°tica",
      "bienestar",
      "salud mental",
      "t√©cnicas",
      "estrategias",
      "apoyo",
      "resilencia",
      "afrontamiento",
    ]

    const contentLower = content.toLowerCase()
    return psychologyKeywords.some((keyword) => contentLower.includes(keyword))
  }

  // Extraer t√©cnicas del contenido
  private extractTechniques(content: string): string[] {
    const techniques: string[] = []
    const contentLower = content.toLowerCase()

    const techniquePatterns = [
      /t√©cnica de ([^.]+)/gi,
      /estrategia de ([^.]+)/gi,
      /m√©todo de ([^.]+)/gi,
      /ejercicio de ([^.]+)/gi,
      /pr√°ctica de ([^.]+)/gi,
    ]

    for (const pattern of techniquePatterns) {
      const matches = contentLower.matchAll(pattern)
      for (const match of matches) {
        if (match[1] && match[1].length < 50) {
          techniques.push(match[1].trim())
        }
      }
    }

    return techniques
  }

  // Extraer conceptos del contenido
  private extractConcepts(content: string): string[] {
    const concepts: string[] = []
    const contentLower = content.toLowerCase()

    const conceptKeywords = [
      "validaci√≥n emocional",
      "regulaci√≥n emocional",
      "inteligencia emocional",
      "autocompasi√≥n",
      "mindfulness",
      "resiliencia",
      "autoestima",
      "asertividad",
      "empat√≠a",
      "escucha activa",
      "reestructuraci√≥n cognitiva",
      "exposici√≥n gradual",
      "relajaci√≥n progresiva",
    ]

    for (const concept of conceptKeywords) {
      if (contentLower.includes(concept)) {
        concepts.push(concept)
      }
    }

    return concepts
  }

  // Obtener recursos espec√≠ficos de sitios de psicolog√≠a
  private async getSpecificPsychologyResources(topic: string): Promise<PsychologyResource[]> {
    // Recursos simulados basados en conocimiento real de psicolog√≠a
    const specificResources: PsychologyResource[] = []

    if (topic.includes("ansiedad") || topic.includes("nervioso") || topic.includes("preocup")) {
      specificResources.push({
        title: "T√©cnicas de Manejo de Ansiedad",
        content:
          "La respiraci√≥n diafragm√°tica es fundamental para calmar el sistema nervioso. La t√©cnica 4-7-8 consiste en inhalar por 4, mantener por 7 y exhalar por 8. El grounding o t√©cnica 5-4-3-2-1 ayuda a conectar con el presente.",
        techniques: ["respiraci√≥n diafragm√°tica", "t√©cnica 4-7-8", "grounding 5-4-3-2-1"],
        concepts: ["regulaci√≥n del sistema nervioso", "mindfulness", "presencia"],
        source: "Conocimiento terap√©utico integrado",
      })
    }

    if (topic.includes("triste") || topic.includes("deprim") || topic.includes("vac√≠o")) {
      specificResources.push({
        title: "Apoyo para Estados Depresivos",
        content:
          "La validaci√≥n emocional es crucial. Peque√±as actividades placenteras pueden ayudar. La autocompasi√≥n implica tratarse con la misma amabilidad que a un buen amigo. Las rutinas b√°sicas de autocuidado son fundamentales.",
        techniques: ["actividades placenteras", "autocompasi√≥n", "rutinas de autocuidado"],
        concepts: ["validaci√≥n emocional", "autocuidado", "compasi√≥n"],
        source: "Terapia cognitivo-conductual adaptada",
      })
    }

    if (topic.includes("autoestima") || topic.includes("no valgo") || topic.includes("fracaso")) {
      specificResources.push({
        title: "Fortalecimiento de la Autoestima",
        content:
          "El di√°logo interno compasivo es esencial. Cuestionar los pensamientos autom√°ticos negativos. Reconocer fortalezas y logros, por peque√±os que sean. La autocompasi√≥n es m√°s efectiva que la autocr√≠tica.",
        techniques: ["di√°logo interno compasivo", "cuestionamiento de pensamientos", "reconocimiento de fortalezas"],
        concepts: ["autocompasi√≥n", "reestructuraci√≥n cognitiva", "autoestima"],
        source: "Terapia de autocompasi√≥n",
      })
    }

    return specificResources
  }

  // Procesar y aprender de un recurso de psicolog√≠a
  private async processPsychologyResource(resource: PsychologyResource): Promise<void> {
    // Extraer y almacenar t√©cnicas
    for (const technique of resource.techniques) {
      if (!this.knowledgeBase.techniques.has(technique)) {
        this.knowledgeBase.techniques.set(technique, {
          name: technique,
          description: this.generateTechniqueDescription(technique, resource.content),
          application: this.inferTechniqueApplication(technique),
          naturalLanguage: this.generateNaturalLanguageForTechnique(technique),
        })
      }
    }

    // Extraer y almacenar conceptos
    for (const concept of resource.concepts) {
      if (!this.knowledgeBase.concepts.has(concept)) {
        this.knowledgeBase.concepts.set(concept, this.generateConceptDescription(concept, resource.content))
      }
    }

    // Extraer frases emp√°ticas naturales del contenido
    const empathicPhrases = this.extractEmpathicPhrases(resource.content)
    this.knowledgeBase.empathyPatterns.push(...empathicPhrases)

    // Mantener solo las mejores frases (evitar acumulaci√≥n excesiva)
    this.knowledgeBase.empathyPatterns = [...new Set(this.knowledgeBase.empathyPatterns)].slice(0, 50)
  }

  // Generar descripci√≥n natural de t√©cnica
  private generateTechniqueDescription(technique: string, content: string): string {
    const descriptions = [
      `Una t√©cnica que he aprendido sobre ${technique} que puede ser muy √∫til`,
      `${technique} es algo que he visto que ayuda mucho a las personas`,
      `He notado que ${technique} puede ser especialmente efectivo`,
      `Una aproximaci√≥n que me parece valiosa es ${technique}`,
    ]

    return descriptions[Math.floor(Math.random() * descriptions.length)]
  }

  // Inferir aplicaci√≥n de t√©cnica
  private inferTechniqueApplication(technique: string): string {
    const techniqueLower = technique.toLowerCase()

    if (techniqueLower.includes("respiraci√≥n") || techniqueLower.includes("respir")) {
      return "Para momentos de ansiedad o estr√©s"
    }
    if (techniqueLower.includes("grounding") || techniqueLower.includes("presente")) {
      return "Para conectar con el momento presente"
    }
    if (techniqueLower.includes("autocompasi√≥n") || techniqueLower.includes("compasi√≥n")) {
      return "Para mejorar la relaci√≥n contigo mismo/a"
    }
    if (techniqueLower.includes("validaci√≥n") || techniqueLower.includes("validar")) {
      return "Para reconocer y aceptar emociones"
    }

    return "Para bienestar emocional general"
  }

  // Generar lenguaje natural para t√©cnica
  private generateNaturalLanguageForTechnique(technique: string): string[] {
    const naturalPhrases = [
      `¬øTe gustar√≠a que exploremos ${technique} juntos?`,
      `Algo que podr√≠a ayudar es ${technique}`,
      `He visto que ${technique} puede ser reconfortante`,
      `¬øHas probado alguna vez ${technique}?`,
      `Una cosa que me parece √∫til es ${technique}`,
    ]

    return naturalPhrases
  }

  // Generar descripci√≥n de concepto
  private generateConceptDescription(concept: string, content: string): string {
    return `${concept} es un concepto importante que puede ayudar en el bienestar emocional`
  }

  // Extraer frases emp√°ticas del contenido
  private extractEmpathicPhrases(content: string): string[] {
    const phrases: string[] = []
    const sentences = content.split(/[.!?]+/)

    for (const sentence of sentences) {
      const sentenceTrimmed = sentence.trim()
      if (sentenceTrimmed.length > 20 && sentenceTrimmed.length < 100 && this.isEmpathicPhrase(sentenceTrimmed)) {
        phrases.push(sentenceTrimmed)
      }
    }

    return phrases.slice(0, 3) // M√°ximo 3 frases por recurso
  }

  // Verificar si una frase es emp√°tica
  private isEmpathicPhrase(phrase: string): boolean {
    const empathicKeywords = [
      "es normal",
      "es comprensible",
      "es v√°lido",
      "no est√°s solo",
      "muchas personas",
      "es importante",
      "mereces",
      "tienes derecho",
      "est√° bien",
      "es natural",
    ]

    const phraseLower = phrase.toLowerCase()
    return empathicKeywords.some((keyword) => phraseLower.includes(keyword))
  }

  // Obtener respuesta psicol√≥gica informada
  async getInformedPsychologicalResponse(prompt: string, emotionalState: string, context: any): Promise<string | null> {
    // Aprender de recursos relevantes antes de responder
    await this.learnFromPsychologyResources(prompt)

    // Buscar t√©cnicas relevantes
    const relevantTechniques = this.findRelevantTechniques(prompt, emotionalState)

    // Buscar conceptos relevantes
    const relevantConcepts = this.findRelevantConcepts(prompt)

    // Si no hay conocimiento relevante, devolver null para usar respuesta base
    if (relevantTechniques.length === 0 && relevantConcepts.length === 0) {
      return null
    }

    // Generar respuesta informada pero natural
    return this.generateInformedResponse(prompt, emotionalState, relevantTechniques, relevantConcepts)
  }

  // Encontrar t√©cnicas relevantes
  private findRelevantTechniques(prompt: string, emotionalState: string): TherapeuticTechnique[] {
    const techniques: TherapeuticTechnique[] = []
    const promptLower = prompt.toLowerCase()

    for (const [name, technique] of this.knowledgeBase.techniques) {
      if (
        promptLower.includes(name.toLowerCase()) ||
        technique.application.toLowerCase().includes(emotionalState) ||
        this.isTechniqueRelevant(technique, promptLower, emotionalState)
      ) {
        techniques.push(technique)
      }
    }

    return techniques.slice(0, 2) // M√°ximo 2 t√©cnicas por respuesta
  }

  // Verificar si una t√©cnica es relevante
  private isTechniqueRelevant(technique: TherapeuticTechnique, prompt: string, emotionalState: string): boolean {
    const relevanceMap = {
      anxious: ["grounding", "respiraci√≥n", "presente", "calma"],
      sad: ["validaci√≥n", "autocompasi√≥n", "autocuidado", "actividades"],
      angry: ["regulaci√≥n", "respiraci√≥n", "pausa", "reflexi√≥n"],
      confused: ["clarificaci√≥n", "exploraci√≥n", "reflexi√≥n", "perspectiva"],
    }

    const relevantKeywords = relevanceMap[emotionalState as keyof typeof relevanceMap] || []
    const techniqueName = technique.name.toLowerCase()

    return relevantKeywords.some((keyword) => techniqueName.includes(keyword) || prompt.includes(keyword))
  }

  // Encontrar conceptos relevantes
  private findRelevantConcepts(prompt: string): string[] {
    const concepts: string[] = []
    const promptLower = prompt.toLowerCase()

    for (const [name, description] of this.knowledgeBase.concepts) {
      if (promptLower.includes(name.toLowerCase()) || this.isConceptRelevant(name, promptLower)) {
        concepts.push(name)
      }
    }

    return concepts.slice(0, 2) // M√°ximo 2 conceptos por respuesta
  }

  // Verificar si un concepto es relevante
  private isConceptRelevant(concept: string, prompt: string): boolean {
    const conceptLower = concept.toLowerCase()
    const conceptKeywords = conceptLower.split(" ")

    return conceptKeywords.some((keyword) => prompt.includes(keyword))
  }

  // Generar respuesta informada pero natural
  private generateInformedResponse(
    prompt: string,
    emotionalState: string,
    techniques: TherapeuticTechnique[],
    concepts: string[],
  ): string {
    let response = ""

    // Comenzar con empat√≠a natural
    const empathyPhrase = this.getRandomEmpathyPhrase()
    response += `${empathyPhrase}\n\n`

    // Integrar t√©cnicas de forma natural
    if (techniques.length > 0) {
      const technique = techniques[0]
      const naturalPhrase = this.getRandomNaturalPhrase()
      const techniqueLanguage = technique.naturalLanguage[Math.floor(Math.random() * technique.naturalLanguage.length)]

      response += `${naturalPhrase} ${techniqueLanguage}\n\n`

      // Agregar descripci√≥n natural de la t√©cnica
      response += `${technique.description}. ${technique.application}.\n\n`
    }

    // Integrar conceptos de forma natural
    if (concepts.length > 0) {
      const concept = concepts[0]
      const conceptDescription = this.knowledgeBase.concepts.get(concept)
      response += `Algo importante sobre ${concept}: ${conceptDescription}\n\n`
    }

    // Agregar validaci√≥n
    const validationPhrase = this.getRandomValidationPhrase()
    response += `${validationPhrase}\n\n`

    // Pregunta de seguimiento emp√°tica
    const followUpQuestions = [
      "¬øC√≥mo te sientes al escuchar esto?",
      "¬øHay algo de esto que te resuena?",
      "¬øTe gustar√≠a que exploremos esto m√°s profundamente?",
      "¬øQu√© piensas sobre esta perspectiva?",
      "¬øHay algo m√°s que te gustar√≠a compartir?",
    ]

    response += followUpQuestions[Math.floor(Math.random() * followUpQuestions.length)]

    return response.trim()
  }

  // Obtener frase emp√°tica aleatoria
  private getRandomEmpathyPhrase(): string {
    return this.knowledgeBase.empathyPatterns[Math.floor(Math.random() * this.knowledgeBase.empathyPatterns.length)]
  }

  // Obtener frase natural aleatoria
  private getRandomNaturalPhrase(): string {
    return this.knowledgeBase.naturalPhrases[Math.floor(Math.random() * this.knowledgeBase.naturalPhrases.length)]
  }

  // Obtener frase de validaci√≥n aleatoria
  private getRandomValidationPhrase(): string {
    return this.knowledgeBase.validationPhrases[Math.floor(Math.random() * this.knowledgeBase.validationPhrases.length)]
  }

  // Obtener estad√≠sticas del conocimiento aprendido
  getKnowledgeStats() {
    return {
      techniques: this.knowledgeBase.techniques.size,
      concepts: this.knowledgeBase.concepts.size,
      empathyPatterns: this.knowledgeBase.empathyPatterns.length,
      validationPhrases: this.knowledgeBase.validationPhrases.length,
      naturalPhrases: this.knowledgeBase.naturalPhrases.length,
      lastUpdate: new Date(this.lastLearningUpdate).toLocaleString(),
    }
  }
}

export const psychologyLearning = new PsychologyLearningSystem()
